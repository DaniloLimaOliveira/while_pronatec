Carga horária - Adicionar coluna com as horas pendêntes
Aluno - Adicionar campo de observação
Relatório financeito (aluno) - Adicionar coluna observação do aluno
Rever __toString das Entitys e Admin
Contexto do usuário de acordo com a região (realizar filtro nos admins)
Utilizar banco de dados mysql
Melhorar layout da aplicação de maneira geral (Aula grid)
verificar formato do texto no excel (utf_8) - Problema utf8 no excel, tentar tag meta
Resetar senha - Configurar envio de e-mail, o cordo do e-mail está no assunto
Gerar certificado por profissional com cpf, de acordo com a carga horaria e curso
Relacionamento de turma com o apoio
Titilo do site no browser
Configurar busca do site


-----------------------------------------------------------------------------------------------------------
Para o diário de classe
{% block title %}{{ 'title_search_results'|trans({'%query%': query}, 'SonataAdminBundle') }}{% endblock %}
{% block breadcrumb %}{% endblock %}


----------------------------------------------------------------------------------------------------------
public function createQuery($context = 'list')
{
    $query = parent::createQuery($context);
    $query->andWhere(
        $query->expr()->eq($query->getRootAliases()[0] . '.my_field', ':my_param')
    );
    $query->setParameter('my_param', 'my_value');
    return $query;
}
------------------------------------------------------------------------------------------------------------------       	
$user = $this->securityContext->getToken()->getUser();
throw new AccessDeniedException();
--------------------------------------------------------------------------------------------------------------------
Segurança das action customizadas		
		
		role_hierarchy:
			- ROLE_PRONATEC_ADMIN_AULA_SAVE
			- ROLE_PRONATEC_ADMIN_AULA_LIST_FREQUENCIA
			- ROLE_PRONATEC_ADMIN_AULA_REGISTER
		
        - { path: ^/admin/aula/\d+/register, role: [ROLE_PRONATEC_ADMIN_AULA_REGISTER] }

--------------------------------------------------------------------------------------------------------------------

$formMapper->getFormBuilder()->addEventListener(FormEvents::PRE_SET_DATA,
            function (FormEvent $event) use ($formMapper, $admin)
            {
                $form = $event ->getForm();
                $subject = $admin->getSubject($event->getData());
            }
         );
		 
------------------------------------------------------------------------------------------------------------------------
select distinct m.id, p.nome as 'polo', c.nome as 'curso', t.nome as 'turma', al.cpf as 'cpf', 
        al.nome as 'aluno', al.banco_nome as 'banco', al.banco_agencia as 'agencia', al.banco_conta as 'conta',
        (select count(*) from frequencia f_sub inner join aula a_sub on a_sub.id=f_sub.aula_id where f_sub.tipo_frequencia='P' and f_sub.matricula_id=m.id and (a_sub.data >= '2018-07-19 00:00:00' and a_sub.data <= '2018-07-26 00:00:00')) as 'presencas',
        (select count(*) from frequencia f_sub inner join aula a_sub on a_sub.id=f_sub.aula_id where f_sub.tipo_frequencia='F' and f_sub.matricula_id=m.id and (a_sub.data >= '2018-07-19 00:00:00' and a_sub.data <= '2018-07-26 00:00:00')) as 'faltas',
        (select count(*) from frequencia f_sub inner join aula a_sub on a_sub.id=f_sub.aula_id where f_sub.tipo_frequencia='FJ' and f_sub.matricula_id=m.id and (a_sub.data >= '2018-07-19 00:00:00' and a_sub.data <= '2018-07-26 00:00:00')) as 'faltasJustificadas',
        ((select count(*) from frequencia f_sub inner join aula a_sub on a_sub.id=f_sub.aula_id where f_sub.tipo_frequencia='P' and f_sub.matricula_id=m.id and (a_sub.data >= '2018-07-19 00:00:00' and a_sub.data <= '2018-07-26 00:00:00'))  * 10) as 'totalReceber'
from frequencia f
inner join matricula m on f.matricula_id = m.id and m.aluno_id = al.id
inner join aula a on a.id = f.aula_id and a.carga_horaria_id = ch.id
inner join aluno al on al.id=m.aluno_id
inner join carga_horaria ch on ch.id = a.carga_horaria_id and m.turma_id = ch.turma_id
inner join turma t on t.id = ch.turma_id and t.polo_id = p.id
inner join curso c on c.id=t.curso_id
inner join polo p on p.id = t.polo_id
where a.data >= '2018-07-19 00:00:00' and a.data <= '2018-07-26 00:00:00'
order by al.nome;


select  co.cpf as 'cpf', co.nome as 'professor', 
        co.banco_nome as 'banco', co.banco_agencia as 'agencia', co.banco_conta as 'conta', 
        count(a.id) as 'aulas', sum(a.quantidade_horas) as 'horas', (sum(a.quantidade_horas) * 50) as 'totalReceber'
from aula a
inner join colaborador co on ch.id=a.carga_horaria_id
inner join carga_horaria ch on ch.id=a.carga_horaria_id and ch.colaborador_id = co.id
where co.funcao = 'P' and
      a.data >= '2018-07-19 00:00:00' and a.data <= '2018-07-26 00:00:00'
group by co.cpf, co.nome, co.banco_nome, co.banco_agencia, co.banco_conta
order by co.nome;














